{
  "Items": [
    {
      "id": "1",
      "question": "What is scoping?",
      "answer": "The current context of execution. The context in which values and expressions are \"visible\" or can be referenced.",
      "sourceLink": "https://developer.mozilla.org/en-US/docs/Glossary/Scope"
    },
    {
      "id": "2",
      "question": "What is hoisting?",
      "answer": "Hoisting allows functions to be safely used in code before they are declared.",
      "sourceLink": "https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"
    },
    {
      "id": "3",
      "question": "What is a closure?",
      "answer": "A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner function.",
      "sourceLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"
    },
    {
      "id": "4",
      "question": "What is lexical scoping?",
      "answer": "inner functions have access to the variables of outer functions",
      "sourceLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"
    },
    {
      "id": "5",
      "question": "Difference between == and ===?",
      "answer": "The main difference between the == and === operator in javascript is that the == operator does the type conversion of the operands before comparison, whereas the === operator compares the values as well as the data types of the operands.",
      "sourceLink": "https://www.scaler.com/topics/javascript/difference-between-double-equals-and-triple-equals-in-javascript/"
    },
    {
      "id": "6",
      "question": "What's the result of comparing two objects with == and ===?",
      "answer": "Usually, when you compare data types like int and strings in JavaScript, you use the equality operators (== and ===). However, comparing objects with == and === will not work. It will result in false. In Javascript objects and arrays are passed by reference.",
      "sourceLink": "https://flexiple.com/javascript-pass-by-reference-or-value/#:~:text=In%20Pass%20by%20Reference%2C%20a,arrays%20are%20passed%20by%20reference."
    },
    {
      "id": "7",
      "question": "What does the call() method do?",
      "answer": "The call() method calls a function with a given this value and arguments provided individually.",
      "sourceLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"
    },
    {
      "id": "8",
      "question": "What does the apply() method do?",
      "answer": "The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).",
      "sourceLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"
    },
    {
      "id": "9",
      "question": "What does the bind() method do?",
      "answer": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
      "sourceLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"
    },
    {
      "id": "10",
      "question": "What is an arrow function",
      "answer": "An arrow function expression is a compact alternative to a traditional function expression, but is limited and can't be used in all situations. Arrow functions don't have their own bindings to this, arguments or super, and should not be used as methods.",
      "sourceLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"
    },
    {
      "id": "11",
      "question": "What is a higher order function",
      "answer": "A higher order function is a function that takes a function as an argument, or returns a function. Higher order function is in contrast to first order functions, which donâ€™t take a function as an argument or return a function as output.",
      "sourceLink": "https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99#:~:text=A%20higher%20order%20function%20is,return%20a%20function%20as%20output."
    },
    {
      "id": "12",
      "question": "What is event bubbling?",
      "answer": "Event bubbling is a method of event propagation in the HTML DOM API when an event is in an element inside another element, and both elements have registered a handle to that event. It is a process that starts with the element that triggered the event and then bubbles up to the containing elements in the hierarchy. In event bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.",
      "sourceLink": "https://www.geeksforgeeks.org/event-bubbling-in-javascript/"
    },
    {
      "id": "13",
      "question": "Explain event loop.",
      "answer": "JavaScript has a runtime model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. ",
      "sourceLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"
    },
    {
      "id": "14",
      "question": "What is the use of 'this' keyword?",
      "answer": "In general, the this references the object of which the function is a property. In other words, the this references the object that is currently calling the function.",
      "sourceLink": "https://www.javascripttutorial.net/javascript-this/"
    },
    {
      "id": "15",
      "question": "What is the difference between 'let' and 'var'?",
      "answer": "let allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used. This is unlike the var keyword, which defines a variable globally, or locally to an entire function regardless of block scope.",
      "sourceLink": "https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var#:~:text=let%20allows%20you%20to%20declare,function%20regardless%20of%20block%20scope"
    },
    {
      "id": "16",
      "question": "How does JavaScript work?",
      "answer": "JavaScript is a single threaded language. Browser executes the JS file using the V8 JS Engine, which converts JS code into machine readable code (binary). The JS Engine includes the 'Memory Heap' and the 'Call Stack'. The 'Memory Heap' stores variables. Global variables can result in a memory leak, since they remain throughout the execution of the program. The 'Call Stack' is where executable code is executed. Once a function is called, it will be pushed out of the 'Call Stack'. Inside of the 'Call Stack' you can only execute one task at a time. You can't have multiple statements executed at the same time. The JavaScript runtime environment helps with asynchronous code (e.g. setTimeout() which part of the web API). The 'Stack' pushes the asynchronous code to the Web API, which will process the request and send callbacks to the 'Callback queue'. The 'Callback queue' is first come, first serve. The 'Event loop' will keep checking if the 'Stack' is empty, and if only it is empty, then 'Event loop' will check the 'Callback queue' and if it finds a callback to execute, it will push it to the 'Stack' and then in turn the function will be called.",
      "sourceLink": "https://www.youtube.com/watch?v=m0_e9hvLZpw&list=PLADp2tn-qPswTdgNuAakyYAvDCp8tqcQW&index=1"
    },
    {
      "id": "17",
      "question": "What is the execution context?",
      "answer": "When a JS file is executed in the browser, firstly, there is a Creation phase, which will give you access to the Window Object and 'this' which Window is assigned to. After the Creation phase, it will be the execution phase, where variables and functions are executed. Whenever a function is executed, it too will have it's own  Creation and execution phase with it's own variables. Whenever the Execution phase for a function is complete, the function's Execution Context is then removed. At the end, you'll be left with the global execution context, with global variables and root function(s).",
      "sourceLink": ""
    }
  ]
}
